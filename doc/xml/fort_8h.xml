<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="fr">
  <compounddef id="fort_8h" kind="file" language="C++">
    <compoundname>fort.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">limits.h</includes>
    <includedby refid="list__vehicules_8c" local="yes">src/list_vehicules.c</includedby>
    <includedby refid="list__types_8c" local="yes">src/list_types.c</includedby>
    <includedby refid="fort_8c" local="yes">src/fort.c</includedby>
    <includedby refid="history_8c" local="yes">src/history.c</includedby>
    <includedby refid="main_8c" local="yes">src/main.c</includedby>
    <includedby refid="list__types_8h" local="yes">include/list_types.h</includedby>
    <includedby refid="history_8h" local="yes">include/history.h</includedby>
    <includedby refid="list__vehicules_8h" local="yes">include/list_vehicules.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/fort.h</label>
        <link refid="fort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/fort.h</label>
        <link refid="fort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/history.h</label>
        <link refid="history_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/list_types.h</label>
        <link refid="list__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/list_vehicules.h</label>
        <link refid="list__vehicules_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/fort.c</label>
        <link refid="fort_8c"/>
      </node>
      <node id="5">
        <label>src/history.c</label>
        <link refid="history_8c"/>
      </node>
      <node id="3">
        <label>src/list_types.c</label>
        <link refid="list__types_8c"/>
      </node>
      <node id="2">
        <label>src/list_vehicules.c</label>
        <link refid="list__vehicules_8c"/>
      </node>
      <node id="6">
        <label>src/main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structft__border__chars" prot="public">ft_border_chars</innerclass>
    <innerclass refid="structft__border__style" prot="public">ft_border_style</innerclass>
      <sectiondef kind="user-defined">
      <header>Special macros to define cell position (row and column).</header>
      <memberdef kind="define" id="fort_8h_1ad5b6b32262309f37874d11369f47c7a5" prot="public" static="no">
        <name>FT_ANY_COLUMN</name>
        <initializer>(UINT_MAX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Any column (can be used to refer to all cells in a row) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="765" column="9" bodyfile="include/fort.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a460dec76b33f388a239206692141f6dd" prot="public" static="no">
        <name>FT_CUR_COLUMN</name>
        <initializer>(UINT_MAX - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current column </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="766" column="9" bodyfile="include/fort.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a18fe66b5bbb33d73be7ba06518c1f40d" prot="public" static="no">
        <name>FT_ANY_ROW</name>
        <initializer>(UINT_MAX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Any row (can be used to refer to all cells in a column) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="767" column="9" bodyfile="include/fort.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a7b2a188460e60fa72f0182fc3d03c5e6" prot="public" static="no">
        <name>FT_CUR_ROW</name>
        <initializer>(UINT_MAX - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current row </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="768" column="9" bodyfile="include/fort.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell properties identifiers.</header>
      <memberdef kind="define" id="fort_8h_1aaa59596ed65b02b3c698e9aaf8d16bbd" prot="public" static="no">
        <name>FT_CPROP_MIN_WIDTH</name>
        <initializer>(0x01U &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Minimum width </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="779" column="9" bodyfile="include/fort.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ae5586130d3dd258d477e370923d0889e" prot="public" static="no">
        <name>FT_CPROP_TEXT_ALIGN</name>
        <initializer>(0x01U &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Text alignment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="780" column="9" bodyfile="include/fort.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a2a5fd97edb51283e0baddcf896555e9d" prot="public" static="no">
        <name>FT_CPROP_TOP_PADDING</name>
        <initializer>(0x01U &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Top padding for cell content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="781" column="9" bodyfile="include/fort.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a47c8f3a9d83e32ac8f3ab5997dc5b542" prot="public" static="no">
        <name>FT_CPROP_BOTTOM_PADDING</name>
        <initializer>(0x01U &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bottom padding for cell content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="782" column="9" bodyfile="include/fort.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a536d5cbb92b59dbc2e28891fa5bcd114" prot="public" static="no">
        <name>FT_CPROP_LEFT_PADDING</name>
        <initializer>(0x01U &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Left padding for cell content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="783" column="9" bodyfile="include/fort.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a11cdcb1be7737d1f65f2b6bc4b8b7e86" prot="public" static="no">
        <name>FT_CPROP_RIGHT_PADDING</name>
        <initializer>(0x01U &lt;&lt; 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Right padding for cell content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="784" column="9" bodyfile="include/fort.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1aadf8488e2ae0a4e7c2e4ecbc715d2b18" prot="public" static="no">
        <name>FT_CPROP_EMPTY_STR_HEIGHT</name>
        <initializer>(0x01U &lt;&lt; 6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Height of empty cell </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="785" column="9" bodyfile="include/fort.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1abd5e4b5a6cb494024967f9d22a50c708" prot="public" static="no">
        <name>FT_CPROP_ROW_TYPE</name>
        <initializer>(0x01U &lt;&lt; 7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Row type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="786" column="9" bodyfile="include/fort.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ad078aa3c64959b51e29ddbc52dc42edc" prot="public" static="no">
        <name>FT_CPROP_CONT_FG_COLOR</name>
        <initializer>(0x01U &lt;&lt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cell content foreground text color </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="787" column="9" bodyfile="include/fort.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a8eec90e0b1b004749b85052422c48671" prot="public" static="no">
        <name>FT_CPROP_CELL_BG_COLOR</name>
        <initializer>(0x01U &lt;&lt; 9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cell background color </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="788" column="9" bodyfile="include/fort.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a979f10a47f0977e563ebf79d2144a8b1" prot="public" static="no">
        <name>FT_CPROP_CONT_BG_COLOR</name>
        <initializer>(0x01U &lt;&lt; 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cell content background color </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="789" column="9" bodyfile="include/fort.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a82551a6b4f9bdc48c57fec86faa05052" prot="public" static="no">
        <name>FT_CPROP_CELL_TEXT_STYLE</name>
        <initializer>(0x01U &lt;&lt; 11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cell text style </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="790" column="9" bodyfile="include/fort.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1aef6afa765c79403917d52a565db47b65" prot="public" static="no">
        <name>FT_CPROP_CONT_TEXT_STYLE</name>
        <initializer>(0x01U &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cell content text style </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="791" column="9" bodyfile="include/fort.h" bodystart="791" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Table properties identifiers.</header>
      <memberdef kind="define" id="fort_8h_1a6556cdb107bc9e5ef97c0e80c8c4492d" prot="public" static="no">
        <name>FT_TPROP_LEFT_MARGIN</name>
        <initializer>(0x01U &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="887" column="9" bodyfile="include/fort.h" bodystart="887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a72f9e4b2eb759e81b4bd15798b4af42a" prot="public" static="no">
        <name>FT_TPROP_TOP_MARGIN</name>
        <initializer>(0x01U &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="888" column="9" bodyfile="include/fort.h" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a19471b7f5a81ddac7980d4a615b9c020" prot="public" static="no">
        <name>FT_TPROP_RIGHT_MARGIN</name>
        <initializer>(0x01U &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="889" column="9" bodyfile="include/fort.h" bodystart="889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ac12c48db088c87088e471656a72de7ad" prot="public" static="no">
        <name>FT_TPROP_BOTTOM_MARGIN</name>
        <initializer>(0x01U &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="890" column="9" bodyfile="include/fort.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a1de2ce152f17fb058c7d397e97a9837d" prot="public" static="no">
        <name>FT_TPROP_ADDING_STRATEGY</name>
        <initializer>(0x01U &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="891" column="9" bodyfile="include/fort.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Built-in table border styles.</header>
      <description><para><simplesect kind="note"><para>Built-in border styles (FT_BASIC_STYLE, FT_BASIC2_STYLE ...) can be used as arguments for <ref refid="fort_8h_1aaa966b7da0ee2e2d2a93dc6a5e1ef81b" kindref="member">ft_set_border_style</ref> and <ref refid="fort_8h_1addb2484d7bc2a271be60cf743ae8eaeb" kindref="member">ft_set_default_border_style</ref>, but their fields shouldn&apos;t be accessed directly because implementation doesn&apos;t guarantee that these objects are properly initialized. </para>
</simplesect>
</para>
</description>
      <memberdef kind="variable" id="fort_8h_1a4566853be8c0cdf91ba9c3f50eb426d4" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_BASIC_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_BASIC_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="716" column="41" bodyfile="src/fort.c" bodystart="3471" bodyend="-1" declfile="include/fort.h" declline="716" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1ab3ed5c4f1c4f7ca26b52b668fd4717f9" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_BASIC2_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_BASIC2_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="717" column="41" bodyfile="src/fort.c" bodystart="3472" bodyend="-1" declfile="include/fort.h" declline="717" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a7581c1fec7b7c2b88f93e3445c62424d" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_SIMPLE_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_SIMPLE_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="718" column="41" bodyfile="src/fort.c" bodystart="3473" bodyend="-1" declfile="include/fort.h" declline="718" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1add469a34d262e6368adaa636d1cf76b7" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_PLAIN_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_PLAIN_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="719" column="41" bodyfile="src/fort.c" bodystart="3474" bodyend="-1" declfile="include/fort.h" declline="719" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a148f3f2c872531fdeca8e4ace60eb258" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_DOT_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_DOT_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="720" column="41" bodyfile="src/fort.c" bodystart="3475" bodyend="-1" declfile="include/fort.h" declline="720" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1aa8916e07fa9a8d1f24c1e1d1e6b68838" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_EMPTY_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_EMPTY_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="721" column="41" bodyfile="src/fort.c" bodystart="3476" bodyend="-1" declfile="include/fort.h" declline="721" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a357302cc732e53c1c7049842fc0fc3c7" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_EMPTY2_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_EMPTY2_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="722" column="41" bodyfile="src/fort.c" bodystart="3477" bodyend="-1" declfile="include/fort.h" declline="722" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1ae4723d497ac2e6980b43ac7732e21f2d" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_SOLID_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_SOLID_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="723" column="41" bodyfile="src/fort.c" bodystart="3478" bodyend="-1" declfile="include/fort.h" declline="723" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1aedcc877521b55c87758949920ef0ee96" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_SOLID_ROUND_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_SOLID_ROUND_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="724" column="41" bodyfile="src/fort.c" bodystart="3479" bodyend="-1" declfile="include/fort.h" declline="724" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a91de4cab0e239a201fa2a7dc961b2fdc" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_NICE_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_NICE_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="725" column="41" bodyfile="src/fort.c" bodystart="3480" bodyend="-1" declfile="include/fort.h" declline="725" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1ad0e15260ea4a4c66f0bfa2c82b889107" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_DOUBLE_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_DOUBLE_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="726" column="41" bodyfile="src/fort.c" bodystart="3481" bodyend="-1" declfile="include/fort.h" declline="726" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a23314491db1204b8654f8cd610692260" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_DOUBLE2_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_DOUBLE2_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="727" column="41" bodyfile="src/fort.c" bodystart="3482" bodyend="-1" declfile="include/fort.h" declline="727" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1af392ad3ae759382d95921e1efb652744" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_BOLD_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_BOLD_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="728" column="41" bodyfile="src/fort.c" bodystart="3483" bodyend="-1" declfile="include/fort.h" declline="728" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1a7b82fd38c92a289fc641d3666684bcd4" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_BOLD2_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_BOLD2_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="729" column="41" bodyfile="src/fort.c" bodystart="3484" bodyend="-1" declfile="include/fort.h" declline="729" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="fort_8h_1aef91486de193b4dfe511a992f9b02bb9" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *const</type>
        <definition>const struct ft_border_style* const FT_FRAME_STYLE</definition>
        <argsstring></argsstring>
        <name>FT_FRAME_STYLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="730" column="41" bodyfile="src/fort.c" bodystart="3485" bodyend="-1" declfile="include/fort.h" declline="730" declcolumn="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="fort_8h_1a8d395d7b047bc27bc45d67e93ccd1189" prot="public" static="no">
        <name>LIBFORT_MAJOR_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="47" column="9" bodyfile="include/fort.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a42bb08f12767dcf3fbd7fd8d9e3bebdf" prot="public" static="no">
        <name>LIBFORT_MINOR_VERSION</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="48" column="9" bodyfile="include/fort.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ae3928dc9499219d0cdec977cf1a904f5" prot="public" static="no">
        <name>LIBFORT_REVISION</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="49" column="9" bodyfile="include/fort.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a8ca57317c0ba39449097a784cc00a818" prot="public" static="no">
        <name>LIBFORT_VERSION_STR</name>
        <initializer>&quot;0.4.2&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="50" column="9" bodyfile="include/fort.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a53e276ed7d1d967b914271c065f649d2" prot="public" static="no">
        <name>FT_HAVE_WCHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>libfort configuration macros (to disable wchar_t/UTF-8 support this macros should be defined) #define FT_CONGIG_DISABLE_WCHAR #define FT_CONGIG_DISABLE_UTF8 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="65" column="9" bodyfile="include/fort.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a6af004300336e4c63a1fdf59698896d1" prot="public" static="no">
        <name>FT_HAVE_UTF8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="69" column="9" bodyfile="include/fort.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a07f0c8ab6e4b3cff5d02dfd41dc4ffe0" prot="public" static="no">
        <name>FT_SUCCESS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operation successfully ended. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="80" column="9" bodyfile="include/fort.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a1d63717d26b0623b922dd4c7e3ad56e8" prot="public" static="no">
        <name>FT_MEMORY_ERROR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="85" column="9" bodyfile="include/fort.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ad0ec3314d73a84b1edb194b9c72a8c21" prot="public" static="no">
        <name>FT_EINVAL</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="90" column="9" bodyfile="include/fort.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a4b7146d6fb5f5349b4f8028601e4e2ff" prot="public" static="no">
        <name>FT_INTERN_ERROR</name>
        <initializer>-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Libfort internal logic error.</para>
<para>Usually such errors mean that something is wrong in libfort internal logic and in most of cases cause of these errors is a library bug. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="99" column="9" bodyfile="include/fort.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a292e7b1093ae354cd2f2e122d0eff729" prot="public" static="no">
        <name>FT_GEN_ERROR</name>
        <initializer>-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>General error.</para>
<para>Different errors that do not belong to the group of errors mentioned above. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="107" column="9" bodyfile="include/fort.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a5c6f8ddf4b77763f2a8ab042db36f482" prot="public" static="no">
        <name>FT_IS_SUCCESS</name>
        <param><defname>arg</defname></param>
        <initializer>((arg) &gt;= 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="110" column="9" bodyfile="include/fort.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1acca4660b494725c897b9fd09ec0be057" prot="public" static="no">
        <name>FT_IS_ERROR</name>
        <param><defname>arg</defname></param>
        <initializer>((arg) &lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="111" column="9" bodyfile="include/fort.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" prot="public" static="no">
        <name>FT_PRINTF_ATTRIBUTE_FORMAT</name>
        <param><defname>string_index</defname></param>
        <param><defname>first_to_check</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="249" column="10" bodyfile="include/fort.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" prot="public" static="no">
        <name>ft_write</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (0 ? FT_CHECK_IF_ARGS_ARE_STRINGS(__VA_ARGS__) : <ref refid="fort_8h_1a69052e887e05d6dc3a0891550127619b" kindref="member">ft_nwrite</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings to the table.</para>
<para>Write specified strings to the same number of consecutive cells in the current row.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="496" column="9" bodyfile="include/fort.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a4ebdb2eea82c8b8c3b80f0c7b7bf1536" prot="public" static="no">
        <name>ft_write_ln</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (0 ? FT_CHECK_IF_ARGS_ARE_STRINGS(__VA_ARGS__) : <ref refid="fort_8h_1a09342b73950f97c0e73bbed2df40b48a" kindref="member">ft_nwrite_ln</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings to the table and go to the next line.</para>
<para>Write specified strings to the same number of consecutive cells in the current row and move current position to the first cell of the next line(row).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="514" column="9" bodyfile="include/fort.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a6176acd755883465f939d260da253005" prot="public" static="no">
        <name>FT_MAX_ROW_INDEX</name>
        <initializer>(UINT_MAX - 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="771" column="9" bodyfile="include/fort.h" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1ac34ce9c2708abc0d5fd49d36f1b99387" prot="public" static="no">
        <name>FT_MAX_COL_INDEX</name>
        <initializer>(UINT_MAX - 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="772" column="9" bodyfile="include/fort.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a316500e47bdb4bccfd2335bc9c3533cc" prot="public" static="no">
        <name>ft_wwrite</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (0 ? CHECK_IF_ARGS_ARE_WSTRINGS(__VA_ARGS__) : <ref refid="fort_8h_1aac28f7840d0a323ca3c4df1e6f43bdf6" kindref="member">ft_nwwrite</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="989" column="9" bodyfile="include/fort.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1aaab4b64b828550757215acb4f44b8ae3" prot="public" static="no">
        <name>ft_wwrite_ln</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (0 ? CHECK_IF_ARGS_ARE_WSTRINGS(__VA_ARGS__) : <ref refid="fort_8h_1a313b73c39aa6127200cd7b7fee92d8f0" kindref="member">ft_nwwrite_ln</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="991" column="9" bodyfile="include/fort.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1a890cf057608c39d3bba387388ed07040" prot="public" static="no">
        <name>ft_u8write</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (<ref refid="fort_8h_1a61aec826074239282309ce1369563f64" kindref="member">ft_u8nwrite</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1008" column="9" bodyfile="include/fort.h" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fort_8h_1af5c83d4e33e0a8804d59310cafd97350" prot="public" static="no">
        <name>ft_u8write_ln</name>
        <param><defname>table</defname></param>
        <param><defname>...</defname></param>
        <initializer>    (<ref refid="fort_8h_1a4c378ecb73c881a0793930c76a64ff41" kindref="member">ft_u8nwrite_ln</ref>(table, FT_PP_NARG_(__VA_ARGS__), __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1010" column="9" bodyfile="include/fort.h" bodystart="1010" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63f" prot="public" static="no" strong="no">
        <type></type>
        <name>ft_color</name>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63face2e85ce681b17d9334eb832a1558445" prot="public">
          <name>FT_COLOR_DEFAULT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa6e1eb39443ae233746378aa84548f553" prot="public">
          <name>FT_COLOR_BLACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Black color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faf31632500abf110557632f09e267472d" prot="public">
          <name>FT_COLOR_RED</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Red color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac27875bf7bc9bb9fec8e7beb79a308a0" prot="public">
          <name>FT_COLOR_GREEN</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Green color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fae1942de73f0c49658b208f9c42a136a8" prot="public">
          <name>FT_COLOR_YELLOW</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Yellow color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa646c06e02caa66410e13dc212242ef16" prot="public">
          <name>FT_COLOR_BLUE</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Blue color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa0f97227c2b13f6c2d88ca06761563a68" prot="public">
          <name>FT_COLOR_MAGENTA</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Magenta color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa2e3e4b314fc75407fa5b38cee9fd5a5c" prot="public">
          <name>FT_COLOR_CYAN</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cyan color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa10c39c7d62795e90c3188f0b6a476f10" prot="public">
          <name>FT_COLOR_LIGHT_GRAY</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light gray color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa4f7814c857a35ace99e77c721bdea819" prot="public">
          <name>FT_COLOR_DARK_GRAY</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dark gray color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faee5e46a4b6fbeb64b6eddca826bdc7ae" prot="public">
          <name>FT_COLOR_LIGHT_RED</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light red color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa37dd75f161f83ea176f74a70a19e763f" prot="public">
          <name>FT_COLOR_LIGHT_GREEN</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light green color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa84816257c9a5f38a20d0e2ea848a5489" prot="public">
          <name>FT_COLOR_LIGHT_YELLOW</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light yellow color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63facebf9e4fe6e259bc0892bd1183c73800" prot="public">
          <name>FT_COLOR_LIGHT_BLUE</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light blue color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac181922016e12de1a32116b2f1eb5a1f" prot="public">
          <name>FT_COLOR_LIGHT_MAGENTA</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light magenta color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa3b5bdee67bbfca060a31ae3d700cb5c4" prot="public">
          <name>FT_COLOR_LIGHT_CYAN</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light cyan color </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faebf36fa4c0f9ae7e8aaa651988686e42" prot="public">
          <name>FT_COLOR_LIGHT_WHYTE</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Light whyte color </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Colors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="798" column="1" bodyfile="include/fort.h" bodystart="798" bodyend="816"/>
      </memberdef>
      <memberdef kind="enum" id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0b" prot="public" static="no" strong="no">
        <type></type>
        <name>ft_text_style</name>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0bad81d0dad8f26df01c149638ccbb6b3e2" prot="public">
          <name>FT_TSTYLE_DEFAULT</name>
          <initializer>= (1U &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default style </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba04256f30849c7cd2b4822e5030fa07fb" prot="public">
          <name>FT_TSTYLE_BOLD</name>
          <initializer>= (1U &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bold </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0baf9c6c97ae4ea6c404ae2e57b8dfab101" prot="public">
          <name>FT_TSTYLE_DIM</name>
          <initializer>= (1U &lt;&lt; 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dim </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba29c6547c7ae5a297a4547de1b15a3133" prot="public">
          <name>FT_TSTYLE_ITALIC</name>
          <initializer>= (1U &lt;&lt; 3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Italic </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba41f3dc969345e99fda4ef48130184745" prot="public">
          <name>FT_TSTYLE_UNDERLINED</name>
          <initializer>= (1U &lt;&lt; 4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Underlined </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba36c9e2fd7b64982a8f7229fe965440d4" prot="public">
          <name>FT_TSTYLE_BLINK</name>
          <initializer>= (1U &lt;&lt; 5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Blink </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba3a4c44c718da5e229c01ab7d6eb05366" prot="public">
          <name>FT_TSTYLE_INVERTED</name>
          <initializer>= (1U &lt;&lt; 6)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reverse (invert the foreground and background colors) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba016fa7d5df89fd09ba7ed6daa7021b16" prot="public">
          <name>FT_TSTYLE_HIDDEN</name>
          <initializer>= (1U &lt;&lt; 7)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hidden (useful for passwords) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Text styles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="821" column="1" bodyfile="include/fort.h" bodystart="821" bodyend="830"/>
      </memberdef>
      <memberdef kind="enum" id="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32c" prot="public" static="no" strong="no">
        <type></type>
        <name>ft_text_alignment</name>
        <enumvalue id="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca62837cbc7c859d5d38d608f51806e66d" prot="public">
          <name>FT_ALIGNED_LEFT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Align left </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32cac43d09334b02f1300989a8789455183e" prot="public">
          <name>FT_ALIGNED_CENTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Align center </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca31bdf997c2db055fe5669e9e174277cc" prot="public">
          <name>FT_ALIGNED_RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Align right </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alignment of cell content. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="836" column="1" bodyfile="include/fort.h" bodystart="836" bodyend="840"/>
      </memberdef>
      <memberdef kind="enum" id="fort_8h_1a06d9536a2e476d68f5055820535d3b34" prot="public" static="no" strong="no">
        <type></type>
        <name>ft_row_type</name>
        <enumvalue id="fort_8h_1a06d9536a2e476d68f5055820535d3b34ae50a530e078dd8425784ca02e66d2433" prot="public">
          <name>FT_ROW_COMMON</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Common row </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1a06d9536a2e476d68f5055820535d3b34a2a0a31078eac88202029c3e9bdaa614a" prot="public">
          <name>FT_ROW_HEADER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Header row </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of table row. Determines appearance of row. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="845" column="1" bodyfile="include/fort.h" bodystart="845" bodyend="848"/>
      </memberdef>
      <memberdef kind="enum" id="fort_8h_1aeed2958a1823084ca6e71883b075baa5" prot="public" static="no" strong="no">
        <type></type>
        <name>ft_adding_strategy</name>
        <enumvalue id="fort_8h_1aeed2958a1823084ca6e71883b075baa5aa620d123a0ac00710153d28a6ab65842" prot="public">
          <name>FT_STRATEGY_REPLACE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Replace old content. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fort_8h_1aeed2958a1823084ca6e71883b075baa5acc1102bce0611e414231a7e41357300f" prot="public">
          <name>FT_STRATEGY_INSERT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Insert new conten. Old content is shifted. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adding strategy.</para>
<para>Determines what happens with old content if current cell is not empty after adding data to it. Default strategy is FT_STRATEGY_REPLACE. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="900" column="1" bodyfile="include/fort.h" bodystart="900" bodyend="903"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" prot="public" static="no">
        <type>struct <ref refid="structft__table" kindref="compound">ft_table</ref></type>
        <definition>typedef struct ft_table ft_table_t</definition>
        <argsstring></argsstring>
        <name>ft_table_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The main structure of libfort containing information about formatted table.</para>
<para>ft_table_t objects should be created by a call to ft_create_table and destroyed with ft_destroy_table. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="257" column="1" bodyfile="include/fort.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fort_8h_1af73fc78695a3009f5ff79a2c0d28c600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
        <definition>ft_table_t* ft_create_table</definition>
        <argsstring>(void)</argsstring>
        <name>ft_create_table</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create formatted table.</para>
<para><simplesect kind="return"><para>The pointer to the new allocated ft_table_t, on success. NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="278" column="12" bodyfile="src/fort.c" bodystart="2639" bodyend="2668" declfile="include/fort.h" declline="278" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ad8cb9ed46da7455f8b6baed42a4a1d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_destroy_table</definition>
        <argsstring>(ft_table_t *table)</argsstring>
        <name>ft_destroy_table</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy formatted table.</para>
<para>Destroy formatted table and free all resources allocated during table creation and work with it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table previousley created with ft_create_table. If table is a null pointer, the function does nothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="290" column="6" bodyfile="src/fort.c" bodystart="2671" bodyend="2695" declfile="include/fort.h" declline="290" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a8470bf5021f5546b8961bd92cadffe6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
        <definition>ft_table_t* ft_copy_table</definition>
        <argsstring>(ft_table_t *table)</argsstring>
        <name>ft_copy_table</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy formatted table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table previousley created with ft_create_table. If table is a null pointer, the function returns null. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the new allocated ft_table_t, on success. NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="301" column="12" bodyfile="src/fort.c" bodystart="2697" bodyend="2746" declfile="include/fort.h" declline="301" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a35af71857b08488797170d7b2a15054a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_ln</definition>
        <argsstring>(ft_table_t *table)</argsstring>
        <name>ft_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move current position to the first cell of the next line(row).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error. </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>This function can fail only in case FT_STRATEGY_INSERT adding strategy was set for the table. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="315" column="5" bodyfile="src/fort.c" bodystart="2771" bodyend="2799" declfile="include/fort.h" declline="315" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a71a30e02111b90af7babd37d13f3e4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_cur_row</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_cur_row</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get row number of the current cell.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Row number of the current cell. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="325" column="8" bodyfile="src/fort.c" bodystart="2801" bodyend="2805" declfile="include/fort.h" declline="325" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a4f3f1b331ee3637e3c8345ecb1b4ebd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_cur_col</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_cur_col</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get column number of the current cell.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Column number of the current cell. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="335" column="8" bodyfile="src/fort.c" bodystart="2807" bodyend="2811" declfile="include/fort.h" declline="335" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a6dffc742cbce46e492cd3298de467b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_set_cur_cell</definition>
        <argsstring>(ft_table_t *table, size_t row, size_t col)</argsstring>
        <name>ft_set_cur_cell</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set current cell position.</para>
<para>Current cell - cell that will be edited with all modifiing functions (ft_printf, ft_write ...).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>New row number for the current cell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>New row number for the current cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="350" column="6" bodyfile="src/fort.c" bodystart="2813" bodyend="2818" declfile="include/fort.h" declline="350" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a6791222986d387c26d905691c30e095b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_is_empty</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_is_empty</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if table is empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 - table is empty 0 - some data has been inserted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="361" column="5" bodyfile="src/fort.c" bodystart="2820" bodyend="2824" declfile="include/fort.h" declline="361" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1aa7e5d0d485d6c519198a5fe9eb706eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_row_count</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_row_count</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of rows in the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of rows in the table. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="371" column="8" bodyfile="src/fort.c" bodystart="2826" bodyend="2830" declfile="include/fort.h" declline="371" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a53eb304387cf4e99f0198f780bc75dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_erase_range</definition>
        <argsstring>(ft_table_t *table, size_t top_left_row, size_t top_left_col, size_t bottom_right_row, size_t bottom_right_col)</argsstring>
        <name>ft_erase_range</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>top_left_row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>top_left_col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bottom_right_row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bottom_right_col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erase range of cells.</para>
<para>Range of cells is determined by 2 points (top-left and bottom-right) (both ends are included).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top_left_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row number of the top left cell in the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top_left_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column number of the top left cell in the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom_right_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row number of the bottom right cell in the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom_right_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column number of the bottom right cell in the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0 - Operation was successfully implemented</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="393" column="5" bodyfile="src/fort.c" bodystart="2832" bodyend="2887" declfile="include/fort.h" declline="393" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a08dbade99a0cfc34c549f7ee29a60fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_set_default_printf_field_separator</definition>
        <argsstring>(char separator)</argsstring>
        <name>ft_set_default_printf_field_separator</name>
        <param>
          <type>char</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set field separator for <ref refid="" kindref="compound">ft_printf</ref>, <ref refid="" kindref="compound">ft_printf_ln</ref> (default separator is &apos;|&apos;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>New separator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="479" column="6" bodyfile="src/fort.c" bodystart="3027" bodyend="3030" declfile="include/fort.h" declline="479" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a69052e887e05d6dc3a0891550127619b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_nwrite</definition>
        <argsstring>(ft_table_t *table, size_t count, const char *cell_content,...)</argsstring>
        <name>ft_nwrite</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write specified number of strings to the table.</para>
<para>Write specified number of strings to the same number of consecutive cells in the current row.</para>
<para><simplesect kind="note"><para>In most cases it is more preferable to use MACRO <ref refid="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" kindref="member">ft_write</ref> instead of <ref refid="fort_8h_1a69052e887e05d6dc3a0891550127619b" kindref="member">ft_nwrite</ref>, which is more safe (<ref refid="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" kindref="member">ft_write</ref> automatically counts the number of string arguments and at compile check that all passed arguments are strings).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell_content</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Other strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="540" column="5" bodyfile="src/fort.c" bodystart="3092" bodyend="3113" declfile="include/fort.h" declline="540" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a09342b73950f97c0e73bbed2df40b48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_nwrite_ln</definition>
        <argsstring>(ft_table_t *table, size_t count, const char *cell_content,...)</argsstring>
        <name>ft_nwrite_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write specified number of strings to the table and go to the next line.</para>
<para>Write specified number of strings to the same number of consecutive cells in the current row and move current position to the first cell of the next line(row).</para>
<para><simplesect kind="note"><para>In most cases it is more preferable to use MACRO <ref refid="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" kindref="member">ft_write</ref> instead of <ref refid="fort_8h_1a69052e887e05d6dc3a0891550127619b" kindref="member">ft_nwrite</ref>, which is more safe (<ref refid="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" kindref="member">ft_write</ref> automatically counts the number of string arguments and at compile check that all passed arguments are strings).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell_content</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Other strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="566" column="5" bodyfile="src/fort.c" bodystart="3115" bodyend="3138" declfile="include/fort.h" declline="566" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a52e0e57e1ead19ce324f76a2eba877fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_row_write</definition>
        <argsstring>(ft_table_t *table, size_t cols, const char *row_cells[])</argsstring>
        <name>ft_row_write</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>row_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings from the array to the table.</para>
<para>Write specified number of strings from the array to the same number of consecutive cells in the current row.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in row_cells. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_cells</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="586" column="5" bodyfile="src/fort.c" bodystart="3195" bodyend="3207" declfile="include/fort.h" declline="586" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a6df5c45d231c9dc0cb1af875164bafb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_row_write_ln</definition>
        <argsstring>(ft_table_t *table, size_t cols, const char *row_cells[])</argsstring>
        <name>ft_row_write_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>row_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings from the array to the table and go to the next line.</para>
<para>Write specified number of strings from the array to the same number of consecutive cells in the current row and move current position to the first cell of the next line(row).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in row_cells. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_cells</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="605" column="5" bodyfile="src/fort.c" bodystart="3209" bodyend="3217" declfile="include/fort.h" declline="605" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ac026a41e784483319aa4c7c89a9dfe06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_table_write</definition>
        <argsstring>(ft_table_t *table, size_t rows, size_t cols, const char *table_cells[])</argsstring>
        <name>ft_table_write</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>table_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings from the 2D array to the table.</para>
<para>Write specified number of strings from the 2D array to the formatted table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_cells</parametername>
</parameternamelist>
<parameterdescription>
<para>2D array of strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="625" column="5" bodyfile="src/fort.c" bodystart="3249" bodyend="3265" declfile="include/fort.h" declline="625" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ad9219b581d29cb079847b0bfd6911271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_table_write_ln</definition>
        <argsstring>(ft_table_t *table, size_t rows, size_t cols, const char *table_cells[])</argsstring>
        <name>ft_table_write_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>table_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write strings from the 2D array to the table and go to the next line.</para>
<para>Write specified number of strings from the 2D array to the formatted table and move current position to the first cell of the next line(row).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to formatted table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_cells</parametername>
</parameternamelist>
<parameterdescription>
<para>2D array of strings to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; data were written</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="645" column="5" bodyfile="src/fort.c" bodystart="3267" bodyend="3275" declfile="include/fort.h" declline="645" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a22fc0b6196d1a9a398785e23673eeeb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_add_separator</definition>
        <argsstring>(ft_table_t *table)</argsstring>
        <name>ft_add_separator</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add separator after the current row.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; separator was added.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="657" column="5" bodyfile="src/fort.c" bodystart="3418" bodyend="3441" declfile="include/fort.h" declline="657" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1aba499778dc3afcddfed50e79b0d97832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ft_to_string</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_to_string</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert table to string representation.</para>
<para>ft_table_t has ownership of the returned pointer. So there is no need to free it. To take ownership user should explicitly copy the returned string with strdup or similar functions.</para>
<para>Returned pointer may be later invalidated by:<itemizedlist>
<listitem><para>Calling ft_destroy_table;</para>
</listitem><listitem><para>Other invocations of ft_to_string.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatted table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>The pointer to the string representation of formatted table, on success.</para>
</listitem><listitem><para>NULL on error. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="677" column="12" bodyfile="src/fort.c" bodystart="3405" bodyend="3408" declfile="include/fort.h" declline="677" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1addb2484d7bc2a271be60cf743ae8eaeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_default_border_style</definition>
        <argsstring>(const struct ft_border_style *style)</argsstring>
        <name>ft_set_default_border_style</name>
        <param>
          <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set default border style for all new formatted tables.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to border style. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; default border style was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="744" column="5" bodyfile="src/fort.c" bodystart="3545" bodyend="3549" declfile="include/fort.h" declline="744" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1aaa966b7da0ee2e2d2a93dc6a5e1ef81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_border_style</definition>
        <argsstring>(ft_table_t *table, const struct ft_border_style *style)</argsstring>
        <name>ft_set_border_style</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const struct <ref refid="structft__border__style" kindref="compound">ft_border_style</ref> *</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set border style for the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ft_table_t structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to border style. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; table border style was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="757" column="5" bodyfile="src/fort.c" bodystart="3551" bodyend="3561" declfile="include/fort.h" declline="757" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a894497fac87518023122266da59f8da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_default_cell_prop</definition>
        <argsstring>(uint32_t property, int value)</argsstring>
        <name>ft_set_default_cell_prop</name>
        <param>
          <type>uint32_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set default cell property for all new formatted tables.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell property identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell property value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; default cell property was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="861" column="5" bodyfile="src/fort.c" bodystart="3589" bodyend="3592" declfile="include/fort.h" declline="861" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a10dc95b3d810a0ab2bf6c90b7b8c66a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_cell_prop</definition>
        <argsstring>(ft_table_t *table, size_t row, size_t col, uint32_t property, int value)</argsstring>
        <name>ft_set_cell_prop</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set property for the specified cell of the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ft_table_t structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell row. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell column. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell property identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell property value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; cell property was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="880" column="5" bodyfile="src/fort.c" bodystart="3565" bodyend="3587" declfile="include/fort.h" declline="880" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a0ebdf7b17d363037f4b0d48ce1438a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_default_tbl_prop</definition>
        <argsstring>(uint32_t property, int value)</argsstring>
        <name>ft_set_default_tbl_prop</name>
        <param>
          <type>uint32_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set default table property.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>Table property identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Table property value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; default table property was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="917" column="5" bodyfile="src/fort.c" bodystart="3595" bodyend="3598" declfile="include/fort.h" declline="917" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ac7ff4899d39f21d4cf8948c73bbb1595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_tbl_prop</definition>
        <argsstring>(ft_table_t *table, uint32_t property, int value)</argsstring>
        <name>ft_set_tbl_prop</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set table property.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ft_table_t structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>Table property identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Table property value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; default table property was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="932" column="5" bodyfile="src/fort.c" bodystart="3600" bodyend="3610" declfile="include/fort.h" declline="932" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ae958a4787cc8fee9abb452bbced096f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_set_cell_span</definition>
        <argsstring>(ft_table_t *table, size_t row, size_t col, size_t hor_span)</argsstring>
        <name>ft_set_cell_span</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hor_span</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set column span for the specified cell of the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ft_table_t structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell row. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Cell column. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hor_span</parametername>
</parameternamelist>
<parameterdescription>
<para>Column span. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0: Success; cell span was changed.</para>
</listitem><listitem><para>(&lt;0): In case of error </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="950" column="5" bodyfile="src/fort.c" bodystart="3636" bodyend="3652" declfile="include/fort.h" declline="950" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a3477def0e7247bbccacb0c93530aaee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_set_memory_funcs</definition>
        <argsstring>(void *(*f_malloc)(size_t size), void(*f_free)(void *ptr))</argsstring>
        <name>ft_set_memory_funcs</name>
        <param>
          <type>void *(*)(size_t size)</type>
          <declname>f_malloc</declname>
        </param>
        <param>
          <type>void(*)(void *ptr)</type>
          <declname>f_free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set functions for memory allocation and deallocation to be used instead of standard ones.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f_malloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function for memory allocation that should be used instead of malloc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_free</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function for memory deallocation that should be used instead of free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>To return memory allocation/deallocation functions to their standard values set f_malloc and f_free to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="967" column="6" bodyfile="src/fort.c" bodystart="3612" bodyend="3615" declfile="include/fort.h" declline="967" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a50aacda85487577f3d84b3733134c660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ft_strerror</definition>
        <argsstring>(int error_code)</argsstring>
        <name>ft_strerror</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return string describing the <computeroutput>error_code</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code returned by the library. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String describing the error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="978" column="12" bodyfile="src/fort.c" bodystart="3617" bodyend="3634" declfile="include/fort.h" declline="978" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a93dacf69774a8a84fecee3035ad7650e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_wprintf</definition>
        <argsstring>(ft_table_t *table, const wchar_t *fmt,...)</argsstring>
        <name>ft_wprintf</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="985" column="5" bodyfile="src/fort.c" bodystart="2994" bodyend="3006" declfile="include/fort.h" declline="985" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a756d50513a7dbf57d2e7144802dd23f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_wprintf_ln</definition>
        <argsstring>(ft_table_t *table, const wchar_t *fmt,...)</argsstring>
        <name>ft_wprintf_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="986" column="5" bodyfile="src/fort.c" bodystart="3008" bodyend="3023" declfile="include/fort.h" declline="986" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1aac28f7840d0a323ca3c4df1e6f43bdf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_nwwrite</definition>
        <argsstring>(ft_table_t *table, size_t n, const wchar_t *cell_content,...)</argsstring>
        <name>ft_nwwrite</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="993" column="5" bodyfile="src/fort.c" bodystart="3145" bodyend="3166" declfile="include/fort.h" declline="993" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a313b73c39aa6127200cd7b7fee92d8f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_nwwrite_ln</definition>
        <argsstring>(ft_table_t *table, size_t n, const wchar_t *cell_content,...)</argsstring>
        <name>ft_nwwrite_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="994" column="5" bodyfile="src/fort.c" bodystart="3168" bodyend="3191" declfile="include/fort.h" declline="994" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a2bfe751bbf2c100eda336c30f73fe199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_row_wwrite</definition>
        <argsstring>(ft_table_t *table, size_t cols, const wchar_t *row_cells[])</argsstring>
        <name>ft_row_wwrite</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>row_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="996" column="5" bodyfile="src/fort.c" bodystart="3220" bodyend="3234" declfile="include/fort.h" declline="996" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a50c12bee8800d14fc70e6cccb10aee1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_row_wwrite_ln</definition>
        <argsstring>(ft_table_t *table, size_t cols, const wchar_t *row_cells[])</argsstring>
        <name>ft_row_wwrite_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>row_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="997" column="5" bodyfile="src/fort.c" bodystart="3236" bodyend="3244" declfile="include/fort.h" declline="997" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1adb37fd79298ef7f28d9304f3aa135f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_table_wwrite</definition>
        <argsstring>(ft_table_t *table, size_t rows, size_t cols, const wchar_t *table_cells[])</argsstring>
        <name>ft_table_wwrite</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>table_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="999" column="5" bodyfile="src/fort.c" bodystart="3279" bodyend="3295" declfile="include/fort.h" declline="999" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ac2c4cd5246efb7d713cc0ccd5dad49cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_table_wwrite_ln</definition>
        <argsstring>(ft_table_t *table, size_t rows, size_t cols, const wchar_t *table_cells[])</argsstring>
        <name>ft_table_wwrite_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>table_cells</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1000" column="5" bodyfile="src/fort.c" bodystart="3297" bodyend="3305" declfile="include/fort.h" declline="1000" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1aac166e469337bc82fb4cc796a6e6b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const wchar_t *</type>
        <definition>const wchar_t* ft_to_wstring</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_to_wstring</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1002" column="15" bodyfile="src/fort.c" bodystart="3411" bodyend="3414" declfile="include/fort.h" declline="1002" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a61aec826074239282309ce1369563f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_u8nwrite</definition>
        <argsstring>(ft_table_t *table, size_t n, const void *cell_content,...)</argsstring>
        <name>ft_u8nwrite</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1012" column="5" bodyfile="src/fort.c" bodystart="3656" bodyend="3678" declfile="include/fort.h" declline="1012" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a4c378ecb73c881a0793930c76a64ff41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_u8nwrite_ln</definition>
        <argsstring>(ft_table_t *table, size_t n, const void *cell_content,...)</argsstring>
        <name>ft_u8nwrite_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cell_content</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1013" column="5" bodyfile="src/fort.c" bodystart="3680" bodyend="3703" declfile="include/fort.h" declline="1013" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ac3f58cfaced19b8571c84aea0827d09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_u8printf</definition>
        <argsstring>(ft_table_t *table, const char *fmt,...) FT_PRINTF_ATTRIBUTE_FORMAT(2</argsstring>
        <name>ft_u8printf</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1015" column="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a63da69eff3300456b04ec99118f76abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int int</type>
        <definition>int int ft_u8printf_ln</definition>
        <argsstring>(ft_table_t *table, const char *fmt,...) FT_PRINTF_ATTRIBUTE_FORMAT(2</argsstring>
        <name>ft_u8printf_ln</name>
        <param>
          <type><ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1016" column="5"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1a402a8d5b1f6adff2d540a930f444a86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int int const void *</type>
        <definition>int int const void* ft_to_u8string</definition>
        <argsstring>(const ft_table_t *table)</argsstring>
        <name>ft_to_u8string</name>
        <param>
          <type>const <ref refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" kindref="member">ft_table_t</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1018" column="12" bodyfile="src/fort.c" bodystart="3738" bodyend="3741" declfile="include/fort.h" declline="1018" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="fort_8h_1ac19c7bf75bde46f17a954159b27724f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_set_u8strwid_func</definition>
        <argsstring>(int(*u8strwid)(const void *beg, const void *end, size_t *width))</argsstring>
        <name>ft_set_u8strwid_func</name>
        <param>
          <type>int(*)(const void *beg, const void *end, size_t *width)</type>
          <declname>u8strwid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set custom function to compute visible width of UTF-8 string.</para>
<para>libfort internally has a very simple logic to compute visible width of UTF-8 strings. It considers that each codepoint will occupy one position on the terminal in case of monowidth font (some east asians wide and fullwidth characters (see <ulink url="http://www.unicode.org/reports/tr11/tr11-33.html">http://www.unicode.org/reports/tr11/tr11-33.html</ulink>) will occupy 2 positions). This logic is very simple and covers wide range of cases. But obviously there a lot of cases when it is not sufficient. In such cases user should use some external libraries and provide an appropriate function to libfort.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u8strwid</parametername>
</parameternamelist>
<parameterdescription>
<para>User provided function to evaluate width of UTF-8 string ( beg - start of UTF-8 string, end - end of UTF-8 string (not included), width - pointer to the result). If function succeed it should return 0, otherwise some non- zero value. If function returns nonzero value libfort fallbacks to default internal algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fort.h" line="1039" column="6" bodyfile="src/fort.c" bodystart="3743" bodyend="3746" declfile="include/fort.h" declline="1039" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main header file describing libfort API. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains declarations of all libfort functions and macro definitions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">libfort</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Copyright<sp/>(c)<sp/>2017<sp/>-<sp/>2020<sp/>Seleznev<sp/>Anton</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="9"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="10"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="11"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="12"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="13"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="16"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="19"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="22"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBFORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBFORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERSION</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="fort_8h_1a8d395d7b047bc27bc45d67e93ccd1189" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBFORT_MAJOR_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="fort_8h_1a42bb08f12767dcf3fbd7fd8d9e3bebdf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBFORT_MINOR_VERSION<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="fort_8h_1ae3928dc9499219d0cdec977cf1a904f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBFORT_REVISION<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="fort_8h_1a8ca57317c0ba39449097a784cc00a818" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBFORT_VERSION_STR<sp/>&quot;0.4.2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Configuration</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FT_CONGIG_DISABLE_WCHAR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="fort_8h_1a53e276ed7d1d967b914271c065f649d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_HAVE_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FT_CONGIG_DISABLE_UTF8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="fort_8h_1a6af004300336e4c63a1fdf59698896d1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_HAVE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN<sp/>CODES</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="fort_8h_1a07f0c8ab6e4b3cff5d02dfd41dc4ffe0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="fort_8h_1a1d63717d26b0623b922dd4c7e3ad56e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_MEMORY_ERROR<sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="fort_8h_1ad0ec3314d73a84b1edb194b9c72a8c21" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_EINVAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="fort_8h_1a4b7146d6fb5f5349b4f8028601e4e2ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_INTERN_ERROR<sp/><sp/>-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="fort_8h_1a292e7b1093ae354cd2f2e122d0eff729" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_GEN_ERROR<sp/><sp/><sp/><sp/><sp/>-4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="fort_8h_1a5c6f8ddf4b77763f2a8ab042db36f482" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_IS_SUCCESS(arg)<sp/>((arg)<sp/>&gt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="fort_8h_1acca4660b494725c897b9fd09ec0be057" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_IS_ERROR(arg)<sp/>((arg)<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Determine<sp/>compiler</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CLANG_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_GCC_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_MICROSOFT_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_UNDEFINED_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Declare<sp/>inline</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_INLINE<sp/>__inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>defined(__cplusplus)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>C++<sp/>needs<sp/>to<sp/>know<sp/>that<sp/>types<sp/>and<sp/>declarations<sp/>are<sp/>C,<sp/>not<sp/>C++.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FT_BEGIN_DECLS<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FT_END_DECLS<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FT_BEGIN_DECLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FT_END_DECLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Helper<sp/>macros</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_STR_2_CAT_(arg1,<sp/>arg2)<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>arg1##arg2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_STR_2_CAT(arg1,<sp/>arg2)<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_STR_2_CAT_(arg1,<sp/>arg2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FT_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_check_if_string_helper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)str;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FT_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_check_if_wstring_helper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)str;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_NARGS_IMPL_(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,N,...)<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_EXPAND_(x)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_PP_NARG_(...)<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_EXPAND_(FT_NARGS_IMPL_(__VA_ARGS__,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_32(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_31(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_31(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_30(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_30(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_29(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_29(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_28(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_28(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_27(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_27(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_26(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_26(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_25(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_25(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_24(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_24(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_23(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_23(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_22(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_22(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_21(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_21(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_20(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_20(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_19(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_19(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_18(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_18(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_17(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_17(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_16(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_16(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_15(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_15(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_14(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_14(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_13(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_13(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_12(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_12(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_11(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_11(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_10(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_10(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_9(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_9(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_8(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_8(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_7(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_7(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_6(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_6(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_5(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_5(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_4(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_4(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_3(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_3(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_2(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_2(checker,arg,...)<sp/>(checker(arg),FT_EXPAND_(FT_CHECK_IF_STR_1(checker,__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_STR_1(checker,arg)<sp/>(checker(arg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_ARGS_ARE_STRINGS__(checker,func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_EXPAND_(func(checker,__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_ARGS_ARE_STRINGS_(checker,basis,<sp/>n,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_CHECK_IF_ARGS_ARE_STRINGS__(checker,FT_STR_2_CAT_(basis,<sp/>n),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CHECK_IF_ARGS_ARE_STRINGS(...)<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_CHECK_IF_ARGS_ARE_STRINGS_(ft_check_if_string_helper,FT_CHECK_IF_STR_,FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FT_HAVE_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_IF_ARGS_ARE_WSTRINGS(...)<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FT_CHECK_IF_ARGS_ARE_STRINGS_(ft_check_if_wstring_helper,FT_CHECK_IF_STR_,FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attribute<sp/>format<sp/>for<sp/>argument<sp/>checking</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FT_CLANG_COMPILER)<sp/>||<sp/>defined(FT_GCC_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_PRINTF_ATTRIBUTE_FORMAT(string_index,<sp/>first_to_check)<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__attribute__<sp/>((format<sp/>(printf,<sp/>string_index,<sp/>first_to_check)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_PRINTF_ATTRIBUTE_FORMAT(string_index,<sp/>first_to_check)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(FT_CLANG_COMPILER)<sp/>||<sp/>defined(FT_GCC_COMPILER)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>libfort<sp/>API</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="fort_8h_1a6307d2840e0e96880c4d0f04b12a2187" refkind="member"><highlight class="normal">FT_BEGIN_DECLS</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__table" kindref="compound">ft_table</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__table" kindref="compound">ft_table</ref><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*<ref refid="fort_8h_1af73fc78695a3009f5ff79a2c0d28c600" kindref="member">ft_create_table</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ad8cb9ed46da7455f8b6baed42a4a1d31" kindref="member">ft_destroy_table</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*<ref refid="fort_8h_1a8470bf5021f5546b8961bd92cadffe6f" kindref="member">ft_copy_table</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a35af71857b08488797170d7b2a15054a" kindref="member">ft_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a71a30e02111b90af7babd37d13f3e4ee" kindref="member">ft_cur_row</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a4f3f1b331ee3637e3c8345ecb1b4ebd6" kindref="member">ft_cur_col</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a6dffc742cbce46e492cd3298de467b16" kindref="member">ft_set_cur_cell</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a6791222986d387c26d905691c30e095b" kindref="member">ft_is_empty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aa7e5d0d485d6c519198a5fe9eb706eba" kindref="member">ft_row_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a53eb304387cf4e99f0198f780bc75dc8" kindref="member">ft_erase_range</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>top_left_row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>top_left_col,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bottom_right_row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bottom_right_col);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FT_CLANG_COMPILER)<sp/>||<sp/>defined(FT_GCC_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_printf(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_printf_ln(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_printf_impl(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ft_printf_ln_impl(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_printf(table,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((<sp/>0<sp/>?<sp/>fprintf(stderr,<sp/>__VA_ARGS__)<sp/>:<sp/>1),<sp/>ft_printf_impl(table,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_printf_ln(table,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((<sp/>0<sp/>?<sp/>fprintf(stderr,<sp/>__VA_ARGS__)<sp/>:<sp/>1),<sp/>ft_printf_ln_impl(table,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a08dbade99a0cfc34c549f7ee29a60fe4" kindref="member">ft_set_default_printf_field_separator</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>separator);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="fort_8h_1aeb1059360e481caef1d2dcced5d5b646" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_write(table,<sp/>...)\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(0<sp/>?<sp/>FT_CHECK_IF_ARGS_ARE_STRINGS(__VA_ARGS__)<sp/>:<sp/>ft_nwrite(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="fort_8h_1a4ebdb2eea82c8b8c3b80f0c7b7bf1536" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_write_ln(table,<sp/>...)\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(0<sp/>?<sp/>FT_CHECK_IF_ARGS_ARE_STRINGS(__VA_ARGS__)<sp/>:<sp/>ft_nwrite_ln(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a69052e887e05d6dc3a0891550127619b" kindref="member">ft_nwrite</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a09342b73950f97c0e73bbed2df40b48a" kindref="member">ft_nwrite_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a52e0e57e1ead19ce324f76a2eba877fc" kindref="member">ft_row_write</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*row_cells[]);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a6df5c45d231c9dc0cb1af875164bafb9" kindref="member">ft_row_write_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*row_cells[]);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ac026a41e784483319aa4c7c89a9dfe06" kindref="member">ft_table_write</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structft__table_1a46c557e3a9f90e8164fadc411ade8b4e" kindref="member">rows</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*table_cells[]);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ad9219b581d29cb079847b0bfd6911271" kindref="member">ft_table_write_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structft__table_1a46c557e3a9f90e8164fadc411ade8b4e" kindref="member">rows</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*table_cells[]);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a22fc0b6196d1a9a398785e23673eeeb0" kindref="member">ft_add_separator</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="fort_8h_1aba499778dc3afcddfed50e79b0d97832" kindref="member">ft_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="structft__border__chars" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__chars" kindref="compound">ft_border_chars</ref><sp/>{</highlight></codeline>
<codeline lineno="689" refid="structft__border__chars_1ab7b5f8993a642dc2fdd0d8def9789502" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1ab7b5f8993a642dc2fdd0d8def9789502" kindref="member">top_border_ch</ref>;</highlight></codeline>
<codeline lineno="690" refid="structft__border__chars_1af018595a39f8cfd750f2364ac7a20c5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1af018595a39f8cfd750f2364ac7a20c5d" kindref="member">separator_ch</ref>;</highlight></codeline>
<codeline lineno="691" refid="structft__border__chars_1aff7c70245cdbc36c6c1af8da5cd95333" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1aff7c70245cdbc36c6c1af8da5cd95333" kindref="member">bottom_border_ch</ref>;</highlight></codeline>
<codeline lineno="692" refid="structft__border__chars_1a17783add57d7bca171967cac3dcb0f20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1a17783add57d7bca171967cac3dcb0f20" kindref="member">side_border_ch</ref>;</highlight></codeline>
<codeline lineno="693" refid="structft__border__chars_1a4eeac7b14fc8f4ac59ef2e3de14264d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1a4eeac7b14fc8f4ac59ef2e3de14264d4" kindref="member">out_intersect_ch</ref>;</highlight></codeline>
<codeline lineno="694" refid="structft__border__style_1aa852ca2701f51131c00cda4835c83a9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__chars_1a36d990167b38a72aa0c3dcdd9bd8472c" kindref="member">in_intersect_ch</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">};</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="structft__border__style" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__chars" kindref="compound">ft_border_chars</ref><sp/><ref refid="structft__border__style_1aa852ca2701f51131c00cda4835c83a9b" kindref="member">border_chs</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__chars" kindref="compound">ft_border_chars</ref><sp/><ref refid="structft__border__style_1ac036a7ad3b97a4b829fe0406302197f8" kindref="member">header_border_chs</ref>;</highlight></codeline>
<codeline lineno="703" refid="structft__border__style_1a977dc73ea3a9d76cf2d3599bb94ff111" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structft__border__style_1a977dc73ea3a9d76cf2d3599bb94ff111" kindref="member">hor_separator_char</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">};</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a4566853be8c0cdf91ba9c3f50eb426d4" kindref="member">FT_BASIC_STYLE</ref>;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ab3ed5c4f1c4f7ca26b52b668fd4717f9" kindref="member">FT_BASIC2_STYLE</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a7581c1fec7b7c2b88f93e3445c62424d" kindref="member">FT_SIMPLE_STYLE</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1add469a34d262e6368adaa636d1cf76b7" kindref="member">FT_PLAIN_STYLE</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a148f3f2c872531fdeca8e4ace60eb258" kindref="member">FT_DOT_STYLE</ref>;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aa8916e07fa9a8d1f24c1e1d1e6b68838" kindref="member">FT_EMPTY_STYLE</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a357302cc732e53c1c7049842fc0fc3c7" kindref="member">FT_EMPTY2_STYLE</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ae4723d497ac2e6980b43ac7732e21f2d" kindref="member">FT_SOLID_STYLE</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aedcc877521b55c87758949920ef0ee96" kindref="member">FT_SOLID_ROUND_STYLE</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a91de4cab0e239a201fa2a7dc961b2fdc" kindref="member">FT_NICE_STYLE</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ad0e15260ea4a4c66f0bfa2c82b889107" kindref="member">FT_DOUBLE_STYLE</ref>;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a23314491db1204b8654f8cd610692260" kindref="member">FT_DOUBLE2_STYLE</ref>;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1af392ad3ae759382d95921e1efb652744" kindref="member">FT_BOLD_STYLE</ref>;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a7b82fd38c92a289fc641d3666684bcd4" kindref="member">FT_BOLD2_STYLE</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aef91486de193b4dfe511a992f9b02bb9" kindref="member">FT_FRAME_STYLE</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1addb2484d7bc2a271be60cf743ae8eaeb" kindref="member">ft_set_default_border_style</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*style);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aaa966b7da0ee2e2d2a93dc6a5e1ef81b" kindref="member">ft_set_border_style</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structft__border__style" kindref="compound">ft_border_style</ref><sp/>*style);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="fort_8h_1ad5b6b32262309f37874d11369f47c7a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_ANY_COLUMN<sp/>(UINT_MAX)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766" refid="fort_8h_1a460dec76b33f388a239206692141f6dd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CUR_COLUMN<sp/>(UINT_MAX<sp/>-<sp/>1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="fort_8h_1a18fe66b5bbb33d73be7ba06518c1f40d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_ANY_ROW<sp/><sp/><sp/><sp/>(UINT_MAX)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="fort_8h_1a7b2a188460e60fa72f0182fc3d03c5e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CUR_ROW<sp/><sp/><sp/><sp/>(UINT_MAX<sp/>-<sp/>1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="fort_8h_1a6176acd755883465f939d260da253005" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_MAX_ROW_INDEX<sp/>(UINT_MAX<sp/>-<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="fort_8h_1ac34ce9c2708abc0d5fd49d36f1b99387" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_MAX_COL_INDEX<sp/>(UINT_MAX<sp/>-<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="fort_8h_1aaa59596ed65b02b3c698e9aaf8d16bbd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_MIN_WIDTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="fort_8h_1ae5586130d3dd258d477e370923d0889e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_TEXT_ALIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="fort_8h_1a2a5fd97edb51283e0baddcf896555e9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_TOP_PADDING<sp/><sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>2)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="fort_8h_1a47c8f3a9d83e32ac8f3ab5997dc5b542" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_BOTTOM_PADDING<sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>3)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="fort_8h_1a536d5cbb92b59dbc2e28891fa5bcd114" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_LEFT_PADDING<sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>4)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="fort_8h_1a11cdcb1be7737d1f65f2b6bc4b8b7e86" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_RIGHT_PADDING<sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>5)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="fort_8h_1aadf8488e2ae0a4e7c2e4ecbc715d2b18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_EMPTY_STR_HEIGHT<sp/>(0x01U<sp/>&lt;&lt;<sp/>6)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="fort_8h_1abd5e4b5a6cb494024967f9d22a50c708" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_ROW_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>7)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="fort_8h_1ad078aa3c64959b51e29ddbc52dc42edc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_CONT_FG_COLOR<sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>8)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="fort_8h_1a8eec90e0b1b004749b85052422c48671" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_CELL_BG_COLOR<sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>9)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="fort_8h_1a979f10a47f0977e563ebf79d2144a8b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_CONT_BG_COLOR<sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>10)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790" refid="fort_8h_1a82551a6b4f9bdc48c57fec86faa05052" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_CELL_TEXT_STYLE<sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>11)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="fort_8h_1aef6afa765c79403917d52a565db47b65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_CPROP_CONT_TEXT_STYLE<sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>12)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63f" kindref="member">ft_color</ref><sp/>{</highlight></codeline>
<codeline lineno="799" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63face2e85ce681b17d9334eb832a1558445" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63face2e85ce681b17d9334eb832a1558445" kindref="member">FT_COLOR_DEFAULT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="800" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa6e1eb39443ae233746378aa84548f553" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa6e1eb39443ae233746378aa84548f553" kindref="member">FT_COLOR_BLACK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/></highlight></codeline>
<codeline lineno="801" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faf31632500abf110557632f09e267472d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faf31632500abf110557632f09e267472d" kindref="member">FT_COLOR_RED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/></highlight></codeline>
<codeline lineno="802" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac27875bf7bc9bb9fec8e7beb79a308a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac27875bf7bc9bb9fec8e7beb79a308a0" kindref="member">FT_COLOR_GREEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/></highlight></codeline>
<codeline lineno="803" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fae1942de73f0c49658b208f9c42a136a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fae1942de73f0c49658b208f9c42a136a8" kindref="member">FT_COLOR_YELLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,<sp/><sp/></highlight></codeline>
<codeline lineno="804" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa646c06e02caa66410e13dc212242ef16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa646c06e02caa66410e13dc212242ef16" kindref="member">FT_COLOR_BLUE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/><sp/></highlight></codeline>
<codeline lineno="805" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa0f97227c2b13f6c2d88ca06761563a68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa0f97227c2b13f6c2d88ca06761563a68" kindref="member">FT_COLOR_MAGENTA</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6,<sp/><sp/></highlight></codeline>
<codeline lineno="806" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa2e3e4b314fc75407fa5b38cee9fd5a5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa2e3e4b314fc75407fa5b38cee9fd5a5c" kindref="member">FT_COLOR_CYAN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>7,<sp/><sp/></highlight></codeline>
<codeline lineno="807" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa10c39c7d62795e90c3188f0b6a476f10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa10c39c7d62795e90c3188f0b6a476f10" kindref="member">FT_COLOR_LIGHT_GRAY</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>8,<sp/><sp/></highlight></codeline>
<codeline lineno="808" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa4f7814c857a35ace99e77c721bdea819" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa4f7814c857a35ace99e77c721bdea819" kindref="member">FT_COLOR_DARK_GRAY</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>9,<sp/><sp/></highlight></codeline>
<codeline lineno="809" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faee5e46a4b6fbeb64b6eddca826bdc7ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faee5e46a4b6fbeb64b6eddca826bdc7ae" kindref="member">FT_COLOR_LIGHT_RED</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10,<sp/></highlight></codeline>
<codeline lineno="810" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa37dd75f161f83ea176f74a70a19e763f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa37dd75f161f83ea176f74a70a19e763f" kindref="member">FT_COLOR_LIGHT_GREEN</ref><sp/><sp/><sp/><sp/>=<sp/>11,<sp/></highlight></codeline>
<codeline lineno="811" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa84816257c9a5f38a20d0e2ea848a5489" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa84816257c9a5f38a20d0e2ea848a5489" kindref="member">FT_COLOR_LIGHT_YELLOW</ref><sp/><sp/><sp/>=<sp/>12,<sp/></highlight></codeline>
<codeline lineno="812" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63facebf9e4fe6e259bc0892bd1183c73800" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63facebf9e4fe6e259bc0892bd1183c73800" kindref="member">FT_COLOR_LIGHT_BLUE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>13,<sp/></highlight></codeline>
<codeline lineno="813" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac181922016e12de1a32116b2f1eb5a1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fac181922016e12de1a32116b2f1eb5a1f" kindref="member">FT_COLOR_LIGHT_MAGENTA</ref><sp/><sp/>=<sp/>15,<sp/></highlight></codeline>
<codeline lineno="814" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa3b5bdee67bbfca060a31ae3d700cb5c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63fa3b5bdee67bbfca060a31ae3d700cb5c4" kindref="member">FT_COLOR_LIGHT_CYAN</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>16,<sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faebf36fa4c0f9ae7e8aaa651988686e42" kindref="member">FT_COLOR_LIGHT_WHYTE</ref><sp/><sp/><sp/><sp/>=<sp/>17<sp/><sp/></highlight></codeline>
<codeline lineno="816" refid="fort_8h_1a8a64c62f618f7c34310da2e2ef31f63faebf36fa4c0f9ae7e8aaa651988686e42" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0b" kindref="member">ft_text_style</ref><sp/>{</highlight></codeline>
<codeline lineno="822" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0bad81d0dad8f26df01c149638ccbb6b3e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0bad81d0dad8f26df01c149638ccbb6b3e2" kindref="member">FT_TSTYLE_DEFAULT</ref><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>0),<sp/></highlight></codeline>
<codeline lineno="823" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba04256f30849c7cd2b4822e5030fa07fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba04256f30849c7cd2b4822e5030fa07fb" kindref="member">FT_TSTYLE_BOLD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>1),<sp/></highlight></codeline>
<codeline lineno="824" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0baf9c6c97ae4ea6c404ae2e57b8dfab101" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0baf9c6c97ae4ea6c404ae2e57b8dfab101" kindref="member">FT_TSTYLE_DIM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>2),<sp/></highlight></codeline>
<codeline lineno="825" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba29c6547c7ae5a297a4547de1b15a3133" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba29c6547c7ae5a297a4547de1b15a3133" kindref="member">FT_TSTYLE_ITALIC</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>3),<sp/></highlight></codeline>
<codeline lineno="826" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba41f3dc969345e99fda4ef48130184745" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba41f3dc969345e99fda4ef48130184745" kindref="member">FT_TSTYLE_UNDERLINED</ref><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>4),<sp/></highlight></codeline>
<codeline lineno="827" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba36c9e2fd7b64982a8f7229fe965440d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba36c9e2fd7b64982a8f7229fe965440d4" kindref="member">FT_TSTYLE_BLINK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>5),<sp/></highlight></codeline>
<codeline lineno="828" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba3a4c44c718da5e229c01ab7d6eb05366" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba3a4c44c718da5e229c01ab7d6eb05366" kindref="member">FT_TSTYLE_INVERTED</ref><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>6),<sp/></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba016fa7d5df89fd09ba7ed6daa7021b16" kindref="member">FT_TSTYLE_HIDDEN</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>7)<sp/><sp/></highlight></codeline>
<codeline lineno="830" refid="fort_8h_1abc496f06f2a4c7fb58b1730ce813be0ba016fa7d5df89fd09ba7ed6daa7021b16" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32c" kindref="member">ft_text_alignment</ref><sp/>{</highlight></codeline>
<codeline lineno="837" refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca62837cbc7c859d5d38d608f51806e66d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca62837cbc7c859d5d38d608f51806e66d" kindref="member">FT_ALIGNED_LEFT</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838" refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32cac43d09334b02f1300989a8789455183e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32cac43d09334b02f1300989a8789455183e" kindref="member">FT_ALIGNED_CENTER</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca31bdf997c2db055fe5669e9e174277cc" kindref="member">FT_ALIGNED_RIGHT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="840" refid="fort_8h_1a3ce6dedcf688e310a3cfbb5cdae9d32ca31bdf997c2db055fe5669e9e174277cc" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34" kindref="member">ft_row_type</ref><sp/>{</highlight></codeline>
<codeline lineno="846" refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34ae50a530e078dd8425784ca02e66d2433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34ae50a530e078dd8425784ca02e66d2433" kindref="member">FT_ROW_COMMON</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34a2a0a31078eac88202029c3e9bdaa614a" kindref="member">FT_ROW_HEADER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848" refid="fort_8h_1a06d9536a2e476d68f5055820535d3b34a2a0a31078eac88202029c3e9bdaa614a" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a894497fac87518023122266da59f8da1" kindref="member">ft_set_default_cell_prop</ref>(uint32_t<sp/>property,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a10dc95b3d810a0ab2bf6c90b7b8c66a4" kindref="member">ft_set_cell_prop</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>uint32_t<sp/>property,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="887" refid="fort_8h_1a6556cdb107bc9e5ef97c0e80c8c4492d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_TPROP_LEFT_MARGIN<sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888" refid="fort_8h_1a72f9e4b2eb759e81b4bd15798b4af42a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_TPROP_TOP_MARGIN<sp/><sp/><sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="fort_8h_1a19471b7f5a81ddac7980d4a615b9c020" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_TPROP_RIGHT_MARGIN<sp/><sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="fort_8h_1ac12c48db088c87088e471656a72de7ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_TPROP_BOTTOM_MARGIN<sp/><sp/><sp/>(0x01U<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="fort_8h_1a1de2ce152f17fb058c7d397e97a9837d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FT_TPROP_ADDING_STRATEGY<sp/>(0x01U<sp/>&lt;&lt;<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5" kindref="member">ft_adding_strategy</ref><sp/>{</highlight></codeline>
<codeline lineno="901" refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5aa620d123a0ac00710153d28a6ab65842" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5aa620d123a0ac00710153d28a6ab65842" kindref="member">FT_STRATEGY_REPLACE</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5acc1102bce0611e414231a7e41357300f" kindref="member">FT_STRATEGY_INSERT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="903" refid="fort_8h_1aeed2958a1823084ca6e71883b075baa5acc1102bce0611e414231a7e41357300f" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a0ebdf7b17d363037f4b0d48ce1438a6c" kindref="member">ft_set_default_tbl_prop</ref>(uint32_t<sp/>property,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ac7ff4899d39f21d4cf8948c73bbb1595" kindref="member">ft_set_tbl_prop</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/>uint32_t<sp/>property,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ae958a4787cc8fee9abb452bbced096f8" kindref="member">ft_set_cell_span</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hor_span);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a3477def0e7247bbccacb0c93530aaee7" kindref="member">ft_set_memory_funcs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*f_malloc)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f_free)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="fort_8h_1a50aacda85487577f3d84b3733134c660" kindref="member">ft_strerror</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FT_HAVE_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a93dacf69774a8a84fecee3035ad7650e" kindref="member">ft_wprintf</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a756d50513a7dbf57d2e7144802dd23f4" kindref="member">ft_wprintf_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="fort_8h_1a316500e47bdb4bccfd2335bc9c3533cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_wwrite(table,<sp/>...)\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(0<sp/>?<sp/>CHECK_IF_ARGS_ARE_WSTRINGS(__VA_ARGS__)<sp/>:<sp/>ft_nwwrite(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="fort_8h_1aaab4b64b828550757215acb4f44b8ae3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_wwrite_ln(table,<sp/>...)\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(0<sp/>?<sp/>CHECK_IF_ARGS_ARE_WSTRINGS(__VA_ARGS__)<sp/>:<sp/>ft_nwwrite_ln(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1aac28f7840d0a323ca3c4df1e6f43bdf6" kindref="member">ft_nwwrite</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a313b73c39aa6127200cd7b7fee92d8f0" kindref="member">ft_nwwrite_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a2bfe751bbf2c100eda336c30f73fe199" kindref="member">ft_row_wwrite</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*row_cells[]);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a50c12bee8800d14fc70e6cccb10aee1c" kindref="member">ft_row_wwrite_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*row_cells[]);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1adb37fd79298ef7f28d9304f3aa135f08" kindref="member">ft_table_wwrite</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*table_cells[]);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ac2c4cd5246efb7d713cc0ccd5dad49cf" kindref="member">ft_table_wwrite_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*table_cells[]);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="fort_8h_1aac166e469337bc82fb4cc796a6e6b569" kindref="member">ft_to_wstring</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FT_HAVE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008" refid="fort_8h_1a890cf057608c39d3bba387388ed07040" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_u8write(table,<sp/>...)\</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ft_u8nwrite(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="fort_8h_1af5c83d4e33e0a8804d59310cafd97350" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ft_u8write_ln(table,<sp/>...)\</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ft_u8nwrite_ln(table,<sp/>FT_PP_NARG_(__VA_ARGS__),<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a61aec826074239282309ce1369563f64" kindref="member">ft_u8nwrite</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a4c378ecb73c881a0793930c76a64ff41" kindref="member">ft_u8nwrite_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cell_content,<sp/>...);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="fort_8h_1ac3f58cfaced19b8571c84aea0827d09b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ac3f58cfaced19b8571c84aea0827d09b" kindref="member">ft_u8printf</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="1016" refid="fort_8h_1a63da69eff3300456b04ec99118f76abc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1a63da69eff3300456b04ec99118f76abc" kindref="member">ft_u8printf_ln</ref>(<ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/><ref refid="fort_8h_1a2c09d90642d39a222d6e4f723e2a93bd" kindref="member">FT_PRINTF_ATTRIBUTE_FORMAT</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="fort_8h_1a402a8d5b1f6adff2d540a930f444a86c" kindref="member">ft_to_u8string</ref>(const<sp/><ref refid="structft__table" kindref="compound">ft_table_t</ref><sp/>*table);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fort_8h_1ac19c7bf75bde46f17a954159b27724f4" kindref="member">ft_set_u8strwid_func</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*u8strwid)(const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*beg,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*width));</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FT_HAVE_UTF8<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">FT_END_DECLS</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LIBFORT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/fort.h"/>
  </compounddef>
</doxygen>
